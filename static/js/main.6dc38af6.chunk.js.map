{"version":3,"sources":["Button.js","Keypad.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Button","_this$props","this","props","buttonColor","buttonValue","react_default","a","createElement","className","onClick","Component","Keypad","_this","src_Button","_this2","renderButton","Header","display","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","memory","setState","newDisplay","replace","newMemory","length","math","toString","err","setTimeout","_this3","_this$state","src_Header","src_Keypad","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6dc38af6.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Button extends Component {\n\n  render () {\n    const { buttonColor, buttonValue } = this.props;\n    return (\n      <span className={buttonColor + '-button button'} onClick={this.props.onClick}> {buttonValue} </span>\n    );\n  }\n}\n\nexport default Button;\n","import React, {Component} from 'react';\nimport Button from './Button.js';\n\nclass Keypad extends Component {\n\n  renderButton(buttonColor, buttonValue) {\n    return (\n      <Button\n        buttonColor={buttonColor}\n        buttonValue={buttonValue}\n        onClick={() => this.props.onClick(buttonValue)}\n      />\n    );\n  }\n\n  render () {\n    return (\n      <div className=\"body\">\n        <div className=\"row\">\n          {this.renderButton('grey', 7)}\n          {this.renderButton('grey', 8)}\n          {this.renderButton('grey', 9)}\n          {this.renderButton('orange', '/')}\n        </div>\n        <div className=\"row\">\n          {this.renderButton('grey', 4)}\n          {this.renderButton('grey', 5)}\n          {this.renderButton('grey', 6)}\n          {this.renderButton('orange', 'x')}\n        </div>\n        <div className=\"row\">\n          {this.renderButton('grey', 1)}\n          {this.renderButton('grey', 2)}\n          {this.renderButton('grey', 3)}\n          {this.renderButton('orange', '+')}\n        </div>\n        <div className=\"row\">\n        {this.renderButton('grey', '.')}\n        {this.renderButton('grey', 0)}\n        {this.renderButton('grey', '=')}\n        {this.renderButton('orange', '-')}\n        </div>\n        <div className=\"clearRow\" onClick={ () => this.props.onClick('clear')}>\n          Clear\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Keypad;\n","import React, {Component} from 'react';\n\nclass Header extends Component {\n  render () {\n    const { display } = this.props;\n    return (\n      <div className=\"header\">\n        <span> {display} </span>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Keypad from './Keypad.js';\nimport Header from './Header.js';\nimport * as math from 'mathjs'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: \"\",\n      memory: \"\",\n    };\n  }\n\n  handleClick(buttonValue, display, memory) {\n    if (buttonValue === 'clear'){\n      this.setState({\n        display: \"\",\n        memory: \"\",\n      });\n    }\n    else if (buttonValue === '='){\n      try {\n        let newDisplay = display.replace(/x/g, \"*\");\n        let newMemory = memory.replace(/x/g, \"*\");\n        if (newMemory[newMemory.length - 1] === \"=\"){\n          newDisplay += newMemory[newMemory.length - 3] + newMemory[newMemory.length - 2];\n          this.setState({\n            display: (math.evaluate(newDisplay)).toString(),\n            memory: newMemory,\n          })\n        }\n        else {\n          this.setState({\n            display: (math.evaluate(newDisplay)).toString(),\n            memory: newMemory + '=',\n          });\n        }\n      }\n      catch(err) {\n        this.setState({\n          display: \"Invalid Expression\"\n        });\n        setTimeout(() => {\n          this.setState({\n            display: \"\",\n            memory: \"\",\n          })\n        }, 350);\n      }\n    }\n    else {\n      this.setState({\n        display: display + buttonValue,\n        memory: memory + buttonValue\n      });\n    }\n  }\n\n  render () {\n    const { display, memory } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"calculator\">\n          <Header display={display}/>\n          <Keypad onClick={ (buttonValue) => this.handleClick(buttonValue, display, memory) }/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}